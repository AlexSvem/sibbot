import telebot
import random
from telebot import types
import wikipedia, re
import config
import tokenn
import time
import datetime

bot = telebot.TeleBot(tokenn.TOKEN)

wikipedia.set_lang("ru")
# –ß–∏—Å—Ç–∏–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏ –≤ Wikipedia –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ —Ç—ã—Å—è—á–µ–π —Å–∏–º–≤–æ–ª–æ–≤
def getwiki(s):
    try:
        ny = wikipedia.page(s)
        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Ç—ã—Å—è—á—É —Å–∏–º–≤–æ–ª–æ–≤
        wikitext=ny.content[:1000]
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ —Ç–æ—á–∫–∞–º
        wikimas=wikitext.split('.')
        # –û—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–ï –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–∏
        wikimas = wikimas[:-1]
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        wikitext2 = ''
        # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º, –≥–¥–µ –Ω–µ—Ç –∑–Ω–∞–∫–æ–≤ ¬´—Ä–∞–≤–Ω–æ¬ª (—Ç–æ –µ—Å—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        for x in wikimas:
            if not('==' in x):
                    # –ï—Å–ª–∏ –≤ —Å—Ç—Ä–æ–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –µ–µ –∫ –Ω–∞—à–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫ —Ç–æ—á–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ
                if(len((x.strip()))>3):
                   wikitext2=wikitext2+x+'.'
            else:
                break
        # –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π —É–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\{[^\{\}]*\}', '', wikitext2)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        return wikitext2
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –º–æ–¥—É–ª—å wikipedia –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ
    except Exception as e:
        return '–í —ç–Ω—Ü–∏–∫–ª–æ–ø–µ–¥–∏–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç—Ç–æ–º'


@bot.message_handler(commands=['start'])
def start(mess):
    with open('add_files\dino_work.webp', 'rb') as st:
        bot.send_sticker(mess.chat.id, st)
    time_now = datetime.datetime.now()
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='rus')
    item2 = types.InlineKeyboardButton('English üá¨üáß', callback_data='eng')
    markup.add(item1, item2)
    bot.send_message(mess.chat.id, f'<b>Hi {mess.from_user.first_name}</b>\n–°–µ–π—á–∞—Å: {time_now}\nClick '
                                   f'/functions to see my features\n<b>Choose the language‚¨á</b>',
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['functions', 'func'])
def func(mess):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    item1 = types.KeyboardButton('/search')
    item2 = types.KeyboardButton('/random_game')
    item3 = types.KeyboardButton('/help')
    item4 = types.KeyboardButton('/wiki')
    item5 = types.KeyboardButton('/')
    item6 = types.KeyboardButton('/about_us')
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(mess.chat.id, 'Here are my functions', reply_markup=markup)


@bot.message_handler(commands=['about_us'])
def about(message):
    markup = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton('–ù–∞—à GitHub', url='https://github.com/AlexSvem')
    item2 = types.InlineKeyboardButton('–ù–∞—à —Å–∞–π—Ç[beta]', url='https://yandex.com/')
    item3 = types.InlineKeyboardButton('–ù–∞—à Vk', url='https://vk.com/')
    item4 = types.InlineKeyboardButton('–ù–∞—à –¢–≥ –∫–∞–Ω–∞–ª', url='https://t.me/sibna_apps')
    markup.add(item1, item2, item3, item4)
    bot.send_message(message.chat.id,
                     '–Ø <b>Sib.help</b> —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π Sibna –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–∏ —Å –Ω–∞—à–∏–º–∏ –Ω–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['wiki'])
def get_wiki(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Å–ª–æ–≤–æ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤ wiki')
    time.sleep(15)
    bot.send_message(message.chat.id, getwiki(message.text))


@bot.message_handler(content_types=['text'])
def tolk(message):
    mess = message.text.lower()
    if '–ø—Ä–∏–≤–µ—Ç' in mess:
        bot.send_message(message.chat.id, '–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç')
    elif '–∫–∞–∫ –¥–µ–ª–∞' in mess:
        mess1 = ["–£ –º–µ–Ω—è –≤—Å–µ –æ–∫, –∞ —É —Ç–µ–±—è –∫–∞–∫?", "–•–∞–π–Æ –±—Ä–æ –º–æ–∏ –¥–µ–ª–∞ –Ω–æ—Ä–º, –∞ —Ç—ã –∫–∞–∫"]
        rend = random.choice(mess1)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–í—Å–µ –æ–∫–µ–π! üòú')
        item2 = types.KeyboardButton('–ù–æ—Ä–º–∞–ª—å–Ω–æ üòê')
        item3 = types.KeyboardButton('–í—Å–µ –ø–ª–æ—Ö–æ üò°')
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, f"<b>{rend}</b>", parse_mode='html', reply_markup=markup)

    elif '–≤—Å–µ –æ–∫–µ–π' in mess:
        with open('fish_like.tgs', 'rb') as stk1:
            bot.send_sticker(message.chat.id, stk1)
        bot.send_message(message.chat.id, '–Ø —Ä–∞–¥ –∑–∞ —Ç–µ–±—è')
    elif '–Ω–æ—Ä–º–∞–ª—å–Ω–æ' in mess:
        with open('fish_cry.tgs', 'rb') as stk2:
            bot.send_sticker(message.chat.id, stk2)
        bot.send_message(message.chat.id, '–ù—É –Ω–∏—á–µ–≥–æ, —è –¥—É–º–∞—é –º–æ–∏ –≤–µ—Å–µ–ª—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –ø–æ–¥–Ω–∏–º—É—Ç —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ')
    elif '–≤—Å–µ –ø–ª–æ—Ö–æ' in mess:
        with open('fish_crying.tgs', 'rb') as stk3:
            bot.send_sticker(message.chat.id, stk3)
        bot.send_message(message.chat.id, '–©—è –ø–æ–≥–æ–¥–∏ –Ω–∞ –∞–Ω–µ–∫–¥–æ—Ç üòÅ')
        bot.send_message(message.chat.id,
                         '–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–µ –ê–∫—É–ª—ã:\n‚Äì–ù—É, –∫–∞–∫ –¥–µ–ª–∞?\n-–ì–æ–ª–æ–¥–Ω–æ, –æ–±—ä—è–≤–∏–ª–∏ –∑–∞–ø—Ä–µ—Ç –Ω–∞ –∫—É–ø–∞–Ω–∏–µ‚Ä¶\n‚Äì–ê, —è —Å–ª—ã—à–∞–ª–∞, —É –≤–∞—Å –¥–∞–π–≤–∏–Ω–≥–∏—Å—Ç–æ–≤ —Ä–∞–∑–≤–∏–ª–æ—Å—å –≤–∏–¥–∏–º–æ-–Ω–µ–≤–∏–¥–∏–º–æ‚Ä¶\n-–î–∞, –æ–Ω–∏ –∂–µ—Å—Ç–∫–∏–µ –∏ —Ä–µ–∑–∏–Ω–æ–π –æ—Ç–¥–∞—é—Ç‚Ä¶\n‚Äì–í–æ—Ç, –¥—É—Ä–∞, –∏—Ö –∂–µ —á–∏—Å—Ç–∏—Ç—å –Ω–∞–¥–æ!')
        with open('chameleo_happy.tgs', 'rb') as stk4:
            bot.send_sticker(message.chat.id, stk4)



@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'rus':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–†—É—Å—Å–∫–∏–π üá∑üá∫",
                                      reply_markup=None)
                bot.send_message(call.message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç</b>, –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º',
                                 parse_mode='html')
                bot.answer_callback_query(callback_query_id=call.id, text="–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π", show_alert=False)
            elif call.data == 'eng':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="English üá¨üáß",
                                      reply_markup=None)
                bot.send_message(call.message.chat.id, '<b>Hello</b>, all other text will be in English',
                                 parse_mode='html')
                bot.answer_callback_query(callback_query_id=call.id, text="English selected", show_alert=False)

    except Exception as e:
        print(repr(e))


@bot.message_handler(content_types=['sticker'])
def sticker(msg):
    d = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]

    r_stk = random.choice(d)
    try:
        if r_stk == 1:
            bot.send_sticker(msg.chat.id, config.stk1)
        elif r_stk == 2:
            bot.send_sticker(msg.chat.id, config.stk2)
        elif r_stk == 3:
            bot.send_sticker(msg.chat.id, config.stk3)
        elif r_stk == 4:
            bot.send_sticker(msg.chat.id, config.stk4)
        elif r_stk == 5:
            bot.send_sticker(msg.chat.id, config.stk5)
        elif r_stk == 6:
            bot.send_sticker(msg.chat.id, config.stk6)
        elif r_stk == 7:
            bot.send_sticker(msg.chat.id, config.stk7)
        elif r_stk == 8:
            bot.send_sticker(msg.chat.id, config.stk8)
        elif r_stk == 9:
            bot.send_sticker(msg.chat.id, config.stk9)
        elif r_stk == 10:
            bot.send_sticker(msg.chat.id, config.stk10)
        elif r_stk == 11:
            bot.send_sticker(msg.chat.id, config.stk11)
        elif r_stk == 12:
            bot.send_sticker(msg.chat.id, config.stk12)
        elif r_stk == 13:
            bot.send_sticker(msg.chat.id, config.stk13)
        elif r_stk == 14:
            bot.send_sticker(msg.chat.id, config.stk14)
        elif r_stk == 15:
            bot.send_sticker(msg.chat.id, config.stk15)
    except Exception:
        bot.send_message(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


bot.polling(none_stop=True, interval=0)
