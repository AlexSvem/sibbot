from typing import BinaryIO

from telebot import apihelper
import telebot
import random
from telebot import types

import config
import tokenn

bot = telebot.TeleBot(tokenn.TOKEN)


@bot.message_handler(commands=['start'])
def start(mess):
    with open('dino_work.webp', 'rb') as stk1:
        bot.send_sticker(mess.chat.id, stk1)
    markup = types.InlineKeyboardMarkup(row_width=2)
    item1 = types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π üá∑üá∫', callback_data='rus')
    item2 = types.InlineKeyboardButton('English üá¨üáß', callback_data='eng')
    markup.add(item1, item2)
    bot.send_message(mess.chat.id, f'<b>Hi {mess.from_user.first_name}</b>\nClick '
                                   f'/functions to see my features\n<b>Choose the language‚¨á</b>',
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['functions', 'func'])
def func(mess):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    item1 = types.KeyboardButton('/search')
    item2 = types.KeyboardButton('/random_game')
    item3 = types.KeyboardButton('/help')
    item4 = types.KeyboardButton('/')
    item5 = types.KeyboardButton('/')
    item6 = types.KeyboardButton('/about_us')
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(mess.chat.id, 'Here are my functions', reply_markup=markup)


@bot.message_handler(commands=['about_us'])
def about(message):
    markup = types.InlineKeyboardMarkup()
    item1 = types.InlineKeyboardButton('–ù–∞—à GitHub', url='https://github.com/AlexSvem')
    item2 = types.InlineKeyboardButton('–ù–∞—à —Å–∞–π—Ç[beta]', url='https://yandex.com/')
    item3 = types.InlineKeyboardButton('–ù–∞—à Vk', url='https://vk.com/')
    markup.add(item1, item2, item3)
    bot.send_message(message.chat.id,
                     '–Ø <b>https://t.me/Sib.help</b> —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∫–æ–º–∞–Ω–¥–æ–π Sibna –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏–∏ —Å –Ω–∞—à–∏–º–∏ –Ω–æ–≤—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏',
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def tolk(message):
    mess = message.text.lower()
    if '–ø—Ä–∏–≤–µ—Ç' in mess:
        bot.send_message(message.chat.id, '–ò —Ç–µ–±–µ –ø—Ä–∏–≤–µ—Ç')
    elif '–∫–∞–∫ –¥–µ–ª–∞' in mess:
        mess1 = ["–£ –º–µ–Ω—è –≤—Å–µ –æ–∫, –∞ —É —Ç–µ–±—è –∫–∞–∫?", "–•–∞–π–Æ –±—Ä–æ –º–æ–∏ –¥–µ–ª–∞ –Ω–æ—Ä–º, –∞ —Ç—ã –∫–∞–∫"]
        rend = random.choice(mess1)
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton('–í—Å–µ –æ–∫–µ–π! üòú')
        item2 = types.KeyboardButton('–ù–æ—Ä–º–∞–ª—å–Ω–æ üòê')
        item3 = types.KeyboardButton('–í—Å–µ –ø–ª–æ—Ö–æ üò°')
        markup.add(item1, item2, item3)
        bot.send_message(message.chat.id, f"<b>{rend}</b>", parse_mode='html', reply_markup=markup)

    elif '–≤—Å–µ –æ–∫–µ–π' in mess:
        with open('fish_like.tgs', 'rb') as stk1:
            bot.send_sticker(message.chat.id, stk1)
        bot.send_message(message.chat.id, '–Ø —Ä–∞–¥ –∑–∞ —Ç–µ–±—è')
    elif '–Ω–æ—Ä–º–∞–ª—å–Ω–æ' in mess:
        with open('fish_cry.tgs', 'rb') as stk2:
            bot.send_sticker(message.chat.id, stk2)
        bot.send_message(message.chat.id, '–ù—É –Ω–∏—á–µ–≥–æ, —è –¥—É–º–∞—é –º–æ–∏ –≤–µ—Å–µ–ª—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã –ø–æ–¥–Ω–∏–º—É—Ç —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ')
    elif '–≤—Å–µ –ø–ª–æ—Ö–æ' in mess:
        with open('fish_crying.tgs', 'rb') as stk3:
            bot.send_sticker(message.chat.id, stk3)
        bot.send_message(message.chat.id, '–©—è –ø–æ–≥–æ–¥–∏ –Ω–∞ –∞–Ω–µ–∫–¥–æ—Ç üòÅ')
        bot.send_message(message.chat.id,
                         '–í—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –¥–≤–µ –ê–∫—É–ª—ã:\n‚Äì–ù—É, –∫–∞–∫ –¥–µ–ª–∞?\n-–ì–æ–ª–æ–¥–Ω–æ, –æ–±—ä—è–≤–∏–ª–∏ –∑–∞–ø—Ä–µ—Ç –Ω–∞ –∫—É–ø–∞–Ω–∏–µ‚Ä¶\n‚Äì–ê, —è —Å–ª—ã—à–∞–ª–∞, —É –≤–∞—Å –¥–∞–π–≤–∏–Ω–≥–∏—Å—Ç–æ–≤ —Ä–∞–∑–≤–∏–ª–æ—Å—å –≤–∏–¥–∏–º–æ-–Ω–µ–≤–∏–¥–∏–º–æ‚Ä¶\n-–î–∞, –æ–Ω–∏ –∂–µ—Å—Ç–∫–∏–µ –∏ —Ä–µ–∑–∏–Ω–æ–π –æ—Ç–¥–∞—é—Ç‚Ä¶\n‚Äì–í–æ—Ç, –¥—É—Ä–∞, –∏—Ö –∂–µ —á–∏—Å—Ç–∏—Ç—å –Ω–∞–¥–æ!')
        with open('chameleo_happy.tgs', 'rb') as stk4:
            bot.send_sticker(message.chat.id, stk4)


@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'rus':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="–†—É—Å—Å–∫–∏–π üá∑üá∫",
                                      reply_markup=None)
                bot.send_message(call.message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç</b>, –≤–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º',
                                 parse_mode='html')
                bot.answer_callback_query(callback_query_id=call.id, text="–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π", show_alert=False)
            elif call.data == 'eng':
                bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                      text="English üá¨üáß",
                                      reply_markup=None)
                bot.send_message(call.message.chat.id, '<b>Hello</b>, all other text will be in English',
                                 parse_mode='html')
                bot.answer_callback_query(callback_query_id=call.id, text="English selected", show_alert=False)

    except Exception as e:
        print(repr(e))


@bot.message_handler(content_types=['sticker'])
def sticker(msg):
    d = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]

    r_stk = random.choice(d)
    try:
        if r_stk == 1:
            bot.send_sticker(msg.chat.id, config.stk1)
        elif r_stk == 2:
            bot.send_sticker(msg.chat.id, config.stk2)
        elif r_stk == 3:
            bot.send_sticker(msg.chat.id, config.stk3)
        elif r_stk == 4:
            bot.send_sticker(msg.chat.id, config.stk4)
        elif r_stk == 5:
            bot.send_sticker(msg.chat.id, config.stk5)
        elif r_stk == 6:
            bot.send_sticker(msg.chat.id, config.stk6)
        elif r_stk == 7:
            bot.send_sticker(msg.chat.id, config.stk7)
        elif r_stk == 8:
            bot.send_sticker(msg.chat.id, config.stk8)
        elif r_stk == 9:
            bot.send_sticker(msg.chat.id, config.stk9)
        elif r_stk == 10:
            bot.send_sticker(msg.chat.id, config.stk10)
        elif r_stk == 11:
            bot.send_sticker(msg.chat.id, config.stk11)
        elif r_stk == 12:
            bot.send_sticker(msg.chat.id, config.stk12)
        elif r_stk == 13:
            bot.send_sticker(msg.chat.id, config.stk13)
        elif r_stk == 14:
            bot.send_sticker(msg.chat.id, config.stk14)
    except Exception:
        bot.send_message(msg.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')


bot.polling(none_stop=True, interval=0)
